pipeline {

    agent any
    environment {
        DRUPAL_ENV = credentials('drupal-env')
        PYTHON_ENV = credentials('python-env')
    }

    stages {

        stage('Environment variables') {
            steps {
                // Cr√©ation des fichiers env
                // script {
                //     def drupalContent = ''
                //     def pythonContent = ''
                //     withCredentials([file(credentialsId: 'drupal-env', variable: 'DRUPAL_FILE')]) {
                //         drupalContent = readFile(file: "${env.DRUPAL_FILE}")
                //     }
                //     writeFile(file: 'drupal/.env', text: drupalContent)

                //     withCredentials([file(credentialsId: 'python-env', variable: 'PYTHON_FILE')]) {
                //         pythonContent = readFile(file: "${env.PYTHON_FILE}")
                //     }
                //     writeFile(file: 'python/.env', text: pythonContent)

                // }
                sh('cp $DRUPAL_ENV ./drupal/.env')
                sh('cp $PYTHON_ENV ./python/.env')
                echo "Environement variables created"
            }
        }

        stage('Monolith launch') {
            steps {
                //  Lancement drupal
                sh '''
                    cd drupal/
                    docker compose up -d
                '''
                echo "Drupal is ready"
            }
        }

        stage('Application tests') {
            steps {
                timeout(7) {
                    waitUntil {
                        script {
                            try {
                                def response = httpRequest(
                                    httpMode: 'GET',
                                    ignoreSslErrors: true,
                                    url: 'https://drupal-drupal-1'
                                )
                                return (response.status == 200)
                            }
                            catch (exception) {
                                return false
                            }
                        }
                    }
                }
                sh '''
                    cd python/
                    python3 -m venv myenv
                    . ./myenv/bin/activate
                    pip3 install -r requirements.txt
                    python3 test.py
                '''

                echo "Tests passed successfully"
            }
        }

        stage('Deployment') {
            steps {
                // Lancement de l'app
                sh '''
                    cd python/
                    docker compose up -d
                '''
                echo "Microservice deployed sucessfully"
            }
        }

        // stage('Cleanup Workspace.') {
        //     steps {
        //         cleanWs()
        //         echo "Workspace cleaned"
        //     }
        // }
    }
    post {
        always {
            // Faire http request pour le ms
            timeout(5) {
                    waitUntil {
                        script {
                            try {
                                def response = httpRequest(
                                    httpMode: 'GET',
                                    ignoreSslErrors: true,
                                    url: 'https://python-microservice-1/get_articles'
                                )
                                return (response.status == 200)
                            }
                            catch (exception) {
                                return false
                            }
                        }
                    }
                }
            sh '''
                cd /var/jenkins_home/apache-jmeter-5.6.2/bin
                /var/jenkins_home/apache-jmeter-5.6.2/bin/jmeter -j jmeter.save.saveservice.output_format=xml -n -t charge.jmx -l report.jtl
            '''
            perfReport '/var/jenkins_home/apache-jmeter-5.6.2/bin/report.jtl'
        }
    }
}
